name: .NET Build, Test & Publish

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

env:
  configuration: 'Release'
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
  solution: 'Valuify.sln'

permissions:
  packages: write

jobs:
  build:
    name: Build, Test & Publish
    runs-on: windows-latest

    outputs:
      semantic: ${{ steps.extract-version.outputs.semantic }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Use .NET SDKs
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x

      - name: Cache NuGet Packages
        uses: actions/cache@v4.2.0
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore NuGet Packages for Solution
        run: dotnet restore ${{ env.solution }}

      - name: Extract and Format Version from Tag
        id: extract-version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match '^refs/tags/') {
            $rawTag = $env:GITHUB_REF -replace '^refs/tags/', ''
          } else {
            $rawTag = git describe --tags (git rev-list --tags --max-count=1)
          }

          $semantic = $rawTag -replace '^v', '' -replace 'beta0+', 'beta.'
          $numeric = ($semantic -split "-")[0] + ".0"

          echo "version=$numeric" >> $env:GITHUB_ENV
          echo "semantic=$semantic" >> $env:GITHUB_ENV
          echo "informational=$rawTag" >> $env:GITHUB_ENV

          echo "::set-output name=semantic::$semantic"

      - name: Build Solution
        run: dotnet build ${{ env.solution }} \
          --configuration ${{ env.configuration }} \
          --no-restore \
          -p:AssemblyVersion=${{ env.version }} \
          -p:FileVersion=${{ env.version }} \
          -p:InformationalVersion=${{ env.informational }} \
          -p:PackageVersion=${{ env.semantic }} \
          -p:Version=${{ env.version }}

      - name: Test Solution
        run: dotnet test ${{ env.solution }} --configuration ${{ env.configuration }} --no-build

      - name: Upload Code Coverage
        uses: codecov/codecov-action@1e68e06f1dbfde0e4cefc87efeba9e4643565303
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Pack Solution
        run: dotnet pack ${{ env.solution }} \
          --configuration ${{ env.configuration }} \
          --no-build \
          --output ./artifacts \
          -p:Version=${{ env.semantic }}

      - name: Publish Packages to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget push **/Valuify*.nupkg \
          --source "https://nuget.pkg.github.com/MooVC/index.json" \
          --api-key ${{ secrets.GITHUB_TOKEN }} \
          --skip-duplicate

      - name: Publish Packages to NuGet
        run: dotnet nuget push **/Valuify*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

  post-deployment:
    name: Post Deployment
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Wait for 5 Minutes
        shell: bash
        run: |
          echo "Waiting for 5 minutes with periodic updates..."

          total=300
          interval=10
          elapsed=0

          while [ $elapsed -lt $total ]
          do
            echo "Elapsed $elapsed seconds..."
            sleep $interval
            elapsed=$((elapsed + interval))
          done

          echo "Wait complete. Checking packages..."

      - name: Deprecate/Unlist Older Packages
        shell: bash
        env:
          PACKAGE_ID: "Valuify"
          NUGET_FEED: "https://api.nuget.org/v3/index.json"
          CURRENT_SEMANTIC: ${{ needs.build.outputs.semantic }}
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          set -e

          # Determine if the newly published version is release or prerelease
          isRelease=true
          if [[ "$CURRENT_SEMANTIC" == *"-"* ]]; then
            isRelease=false
          fi

          echo "Package ID: $PACKAGE_ID"
          echo "NuGet Feed: $NUGET_FEED"
          echo "Current Published Version: $CURRENT_SEMANTIC (isRelease=$isRelease)"

          # Retrieve all versions from the registration endpoint
          registrationJson=$(curl -s "https://api.nuget.org/v3/registration5-semver1/${PACKAGE_ID}/index.json")
          if [ -z "$registrationJson" ]; then
            echo "No data returned from the registration endpoint."
            exit 0
          fi

          # version|listed|deprecated
          combinedData=$(echo "$registrationJson" | jq -r '
            .items[]?.items[]? as $entry
            | [
                $entry.catalogEntry.version,
                (if $entry.catalogEntry.listed then "true" else "false" end),
                (if $entry.catalogEntry.deprecation then "deprecated" else "null" end)
              ]
            | join("|")
          ')

          if [ -z "$combinedData" ]; then
            echo "No published versions found for $PACKAGE_ID."
            exit 0
          fi

          while IFS= read -r row; do
            ver=$(echo "$row" | cut -d'|' -f1)
            isListed=$(echo "$row" | cut -d'|' -f2)
            isDeprecated=$(echo "$row" | cut -d'|' -f3)

            # Always skip if it's the newly published version
            if [ "$ver" = "$CURRENT_SEMANTIC" ]; then
              echo "Skipping newly published version $ver (no deprecation/unlisting)."
              continue
            fi

            # If it has a dash => prerelease => unlist if currently listed
            if [[ "$ver" == *"-"* ]]; then
              if [ "$isListed" = "true" ]; then
                echo "Older prerelease version $ver is currently listed => unlisting..."
                dotnet nuget delete "$PACKAGE_ID" "$ver" \
                  --source "$NUGET_FEED" \
                  --api-key "$NUGET_API_KEY" \
                  --non-interactive || echo "Could not unlist $ver (possibly already unlisted)."
              else
                echo "Older prerelease version $ver is already unlisted. No action needed."
              fi
            else
              # It's a release version
              if [ "$isRelease" = true ]; then
                # Deprecate if not already deprecated
                if [ "$isDeprecated" = "null" ]; then
                  echo "Older release version $ver is not deprecated => deprecating..."
                  dotnet nuget deprecate "$PACKAGE_ID" \
                    --version "$ver" \
                    --source "$NUGET_FEED" \
                    --api-key "$NUGET_API_KEY" \
                    --reason Other \
                    --message "Superseded by $CURRENT_SEMANTIC" \
                    --non-interactive || echo "Deprecation failed or already deprecated."
                else
                  echo "Older release version $ver is already deprecated. No action needed."
                fi
              else
                echo "Found older release version $ver, but this build is prerelease => no action."
              fi
            fi
          done <<< "$combinedData"

          echo "Done!"